// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

use num::bigint::BigInt;
use std::collections::HashSet;

// There's probably a way to do this my analysis
pub fn euler29() -> u64 {
    let mut h = HashSet::new();
    for a in 2..101 {
        for b in 2..101 {
            let x = BigInt::from(a);
            h.insert(x.pow(b as u32));
        }
    }
    h.len() as u64
}

pub fn euler29_example() {
    println!("\nProblem: How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?");
    println!("\n\nA big integers and a hashset makes this easy to do directly.");
    let s = "
pub fn euler29() -> u64 {
    let mut h = HashSet::new();
    for a in 2..101 {
        for b in 2..101 {
            let x = BigInt::from(a);
            h.insert(x.pow(b as u32));
        }
    }
    h.len() as u64
}";
    println!("\n{}\n",s);
    println!("The answer is: {}",euler29());
}

#[test]
fn test29() {
    assert_eq!(euler29(),9183)
}